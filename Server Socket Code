# This code is for a server which uses Fernet Hashing in order to encrpyt and decrypt a message or a password using a unique key.
# Inorder to use the functionality of fernet hashing we have to install Fernet(main algorithm) and socket(to create a TCP or UDP socket)


import socket
from cryptography.fernet import Fernet


def encryption(password_inp):
    key = "OZ3Mq9zCvgWq-Omzs5cDoJHqjOOblcpoxETPBPVaE7M=" # unique key
                                                         # Key generated by Fernet function
    message = password_inp.encode()
    function = Fernet(key)
    encrypt = function.encrypt(message)                  # Message Encryption
    return encrypt
    # Returning the encrypted data


def decryption(password_inp):
    key = "OZ3Mq9zCvgWq-Omzs5cDoJHqjOOblcpoxETPBPVaE7M="  # Same key for decryption
                                                          # Same key should be used to decrypt the data otherwise it will through error
                                                          
    f = Fernet(key)
    decrypted = f.decrypt(password_inp)                   # Decryption 
    return decrypted.decode()



if __name__ == 'main':

    socket_object = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                                                           # Socket Object is created using AF_INET and TCP.
    socket_object.bind(('localhost', 8000))
                                                           # Since the socket is server and client is on same machine we can use 'localhost'.
                                                           # 8000 is the port number used for binding.
    socket_object.listen(3)
                                                           # This listens to only three clients.
    credentials = dict()                                   # Storing the credentials 
    while True:
        client_object, address_client = socket_object.accept()
        client_object.send(bytes("You are connected to Server....", 'utf-8'))
        string = client_object.recv(1024).decode()
        email, password = map(str, string.split(" "))      # Taking password and email
        encrypted_pass = encryption(password)
        credentials[email] = encrypted_pass
        client_object.send(bytes("Login Successful!", 'utf-8'))
        client_object.close()
        
        
        
# Here I have hardcoded the key for a every value but in hashmap I can also store the value in the form of a key value pair, key=email and value in the form of a tuple 
# (message/password, unique fernet seed).

